// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// schema.prisma

// Define the data model
// schema.prisma

model Stocks {
  id         Int        @id @default(autoincrement())
  busy       Boolean?
  created_at DateTime?
  book       Books      @relation(fields: [bookId], references: [id])
  bookId     Int
  location   Locations  @relation(fields: [stockId], references: [id])
  stockId    Int
  Rents      Rents[]
  Comments   Comments[]
}

model Books {
  id           Int         @id @default(autoincrement())
  name         String?
  author       Authors     @relation(fields: [authorId], references: [id])
  authorId     Int
  rentDuration Int
  pages        Int
  booksGroup   BooksGroups @relation(fields: [booksGroupId], references: [id])
  booksGroupId Int
  publisher    Publishers  @relation(fields: [publisherId], references: [id])
  publisherId  Int
  collection   Collections @relation(fields: [collectionId], references: [id])
  collectionId Int
  Stocks       Stocks[]
}

model Users {
  id         Int       @id @default(autoincrement())
  firstName  String?
  lastName   String
  location   Locations @relation(fields: [locationId], references: [id])
  locationId Int
  created_at DateTime
  updated_at DateTime
  Rents      Rents[]
  Sms        Sms[]
}

model Rents {
  id       Int        @id @default(autoincrement())
  stock    Stocks     @relation(fields: [stockId], references: [id])
  stockId  Int
  user     Users      @relation(fields: [userId], references: [id])
  userId   Int
  Comments Comments[]
}

model Authors {
  id    Int     @id @default(autoincrement())
  name  String?
  Books Books[]
}

model Locations {
  id         Int      @id @default(autoincrement())
  name       String?
  created_at DateTime
  updated_at DateTime
  region     Regions  @relation(fields: [regionId], references: [id])
  regionId   Int
  Stocks     Stocks[]
  Users      Users[]
}

model BooksGroups {
  id           Int     @id @default(autoincrement())
  name         String?
  rentDuration Int
  pages        Int
  Books        Books[]
}

model Regions {
  id         Int         @id @default(autoincrement())
  name       String?
  created_at DateTime
  updated_at DateTime
  Locations  Locations[]
}

model Publishers {
  id    Int     @id @default(autoincrement())
  name  String?
  Books Books[]
}

model Collections {
  id    Int     @id @default(autoincrement())
  name  String?
  Books Books[]
}

model Comments {
  id         Int      @id @default(autoincrement())
  text       String?
  created_at DateTime
  updated_at DateTime
  stock      Stocks   @relation(fields: [stockid], references: [id])
  stockid    Int
  rent       Rents?   @relation(fields: [rentId], references: [id])
  rentId     Int?
}

model SmsBulk {
  id   Int   @id @default(autoincrement())
  text Int
  Sms  Sms[]
}

model Sms {
  id                  Int     @id @default(autoincrement())
  text                Int?
  phone               Int
  user                Users?  @relation(fields: [userId], references: [id])
  userId              Int?
  status              String?
  error_reason        String?
  provider            String
  provider_message_id String
  smsbulk             SmsBulk @relation(fields: [smsbulkId], references: [id])
  smsbulkId           Int
}
