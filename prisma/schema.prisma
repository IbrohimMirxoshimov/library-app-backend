// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// schema.prisma

// Define the data model
// schema.prisma

enum Gender {
  male
  female
}

enum SmsStatusEnum {
  draft
  sent
  failed
}

enum SmsProviderType {
  eskiz
  manual
  play_mobile
}

model User {
  id             Int      @id @default(autoincrement())
  firstName      String
  lastName       String?
  fullName       String?
  username       String   @unique
  phone          String?
  extraPhone     String?
  blockingReason String?
  extra          String?
  password       String   @default("") @db.VarChar(32) // Assuming a VARCHAR(32) column in the database
  gender         Gender
  birthDate      DateTime?
  owner          Boolean  @default(false)
  moderator      Boolean  @default(false)
  librarian      Boolean  @default(false)
  verified       Boolean  @default(false)
  status         Int      @default(1) // Assuming UserStatus.active = 1
  balance        Int      @default(0)
  phoneVerified  Boolean  @default(false)
  telegramId     String?
  passportId     String?  @unique
  passportImage  String?
  tempLocationId Int?
  pinfl          String?  @unique
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // relations
  rents Rent[]
  sms Sms[]
  smsBulks SmsBulk[]
  books Book[]
  authors Author[]

  address Address? @relation(fields: [addressId], references: [id])
  addressId Int? @unique

  locations Location @relation("locationId", fields: [locationId], references: [id])
  locationId Int 

  library Location? @relation("libraryRelation", fields: [libraryId], references: [id])
  libraryId Int? @unique


  @@map("users")
  @@unique([passportId, pinfl])
}

model Town {
  id        Int    @id @default(autoincrement())
  name      String @unique
  deletedAt DateTime?

  // relations
  region        Region      @relation(fields: [regionId], references: [id])
  regionId      Int         // Foreign key for region relation
  
  @@map("town")
}

model Stock {
  id Int @id @default(autoincrement())
  busy Boolean @default(false)
  deletedAt DateTime?

  // relations
  location      Location    @relation(fields: [locationId], references: [id])
  locationId    Int         // Foreign key for location relation
  comments      Comments[]
  rent Rent?
  book Book @relation(fields: [bookId], references: [id])
  bookId Int

  @@map("stocks")
}

model SmsBulk {
  id   Int   @id @default(autoincrement())
  text Int

  // relations
  user          User        @relation(fields: [userId], references: [id])
  userId        Int         // Foreign key for user relation
  sms Sms[]

  @@map("smsbulk")
}

model Sms {
  id                 Int              @id @default(autoincrement())
  phone              String
  status             SmsStatusEnum    @default(draft)
  error_reason       String?
  text               String?
  provider           SmsProviderType?
  provider_message_id String?

  // relations
  user User @relation(fields: [userId], references: [id])
  userId Int
  sms SmsBulk @relation(fields: [smsbulkId], references: [id])
  smsbulkId Int

  @@map("sms")
}


model Rent {
  id             Int      @id @default(autoincrement())
  leasedAt       DateTime
  customId       Int?
  returningDate  DateTime
  returnedAt     DateTime?
  rejected       Boolean  @default(false)
  deletedAt      DateTime?

  user          User        @relation(fields: [userId], references: [id])
  userId        Int 
  location      Location    @relation(fields: [locationId], references: [id])
  locationId    Int         // Foreign key for location relation
  comments      Comments[]
  stock Stock @relation(fields: [stockId], references: [id])
  stockId Int @unique

  @@map("rent")
}

model Region {
  id Int @id @default(autoincrement())
  name String @unique
  deletedAt DateTime?

  // relations
  towns         Town[]
  locations     Location[]

  @@map("region")
} 

model Publishing {
  id Int @id @default(autoincrement())
  name String @unique
  deletedAt DateTime?

  @@map("publishing")
} 

model News {
  id Int @id @default(autoincrement())
  title String
  content String
  image String?
  deletedAt DateTime?
  createdAt DateTime? @default(now())

  @@map("news")
}

model Location {
  id         Int      @id @default(autoincrement())
  name       String @unique
  link        String?
  active Boolean? @default(true)
  description String?
  updatedAt DateTime?
  
  // relations
  rents         Rent[]
  address       Address?
  users         User[] @relation("locationId")
  library       User? @relation("libraryRelation")
  stocks        Stock[]
  region        Region      @relation(fields: [regionId], references: [id])
  regionId      Int  

  @@map("location")
}

model Comments {
  id         Int      @id @default(autoincrement())
  text       String?
  updatedAt DateTime?

  // relations
  stock         Stock?      @relation(fields: [stockId], references: [id])
  stockId       Int?        // Foreign key for stock relation
  rent          Rent?       @relation(fields: [rentId], references: [id])
  rentId        Int? 

  @@map("comments")
}

model Collections {
  id    Int     @id @default(autoincrement())
  name  String @unique
  sort Int @default(0)
  deletedAt DateTime?
  
  // relations
  books         Book[]
  @@map("collection")
}

model BooksGroups {
  id           Int     @id @default(autoincrement())
  name         String @unique
  description String?
  image String?
  deletedAt DateTime?

  // relations
  books Book[]

  @@map("booksGroups")
}

model Book {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  description  String?
  image        String?
  isbn         String?
  language     String   @default("uz")
  rentDuration Int      @default(15)
  price        Int      @default(50000)
  printedAt    DateTime?
  pages        Int?
  sort         Int      @default(0)
  few          Int      @default(2)
  deletedAt    DateTime?

  // relation
  stocks Stock[]
  author Author @relation(fields: [authorId], references: [id])
  authorId Int
  collection Collections @relation(fields: [collectionId], references: [id])
  collectionId Int
  booksGroup BooksGroups @relation(fields: [booksGroupId], references: [id])
  booksGroupId Int
  user User @relation(fields: [creatorId], references: [id])
  creatorId Int

  @@map("books")
}

model Author {
  id    Int     @id @default(autoincrement())
  name  String
  deletedAt DateTime?

  // relations
  books         Book[]
  user User @relation(fields: [creatorId], references: [id])
  creatorId     Int 
  @@map("author")
}

model Address {
  id           Int     @id @default(autoincrement())
  countryCode  String  @default("uz")
  region       String
  town         String?
  addressLine  String
  street       String?
  home         String?
  latitude     Float?
  longitude    Float?
  deletedAt DateTime?

  // relations
  user User?
  location      Location    @relation(fields: [locationId], references: [id])
  locationId    Int  @unique
  
  @@map("address")
}
